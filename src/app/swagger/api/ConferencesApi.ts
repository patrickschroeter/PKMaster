/**
 * PK API
 * Move your app forward with the PK API
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class ConferencesApi {
    protected basePath = 'https://localhost:8080/v0';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Add a Application to the Conference
     * 
     * @param token Accesstoken to authenticate with the API
     * @param conferenceId ID of the Conference
     * @param application The Application ID
     */
    public addApplicationToConference (token: number, conferenceId: number, application?: number, extraHttpRequestParams?: any ) : Observable<models.Conference> {
        const path = this.basePath + '/conferences/{conference_id}/applications'
            .replace('{' + 'conference_id' + '}', String(conferenceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling addApplicationToConference.');
        }
        // verify required parameter 'conferenceId' is not null or undefined
        if (conferenceId === null || conferenceId === undefined) {
            throw new Error('Required parameter conferenceId was null or undefined when calling addApplicationToConference.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(application);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create new Conference
     * 
     * @param token Accesstoken to authenticate with the API
     * @param conference new Conference Object
     */
    public addConference (token: number, conference?: models.Conference, extraHttpRequestParams?: any ) : Observable<models.Conference> {
        const path = this.basePath + '/conferences';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling addConference.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(conference);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete Application of Conference
     * 
     * @param token Accesstoken to authenticate with the API
     * @param conferenceId ID of the Conference
     * @param application The Application ID
     */
    public deleteApplicationOfConference (token: number, conferenceId: number, application?: number, extraHttpRequestParams?: any ) : Observable<models.Conference> {
        const path = this.basePath + '/conferences/{conference_id}/applications'
            .replace('{' + 'conference_id' + '}', String(conferenceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling deleteApplicationOfConference.');
        }
        // verify required parameter 'conferenceId' is not null or undefined
        if (conferenceId === null || conferenceId === undefined) {
            throw new Error('Required parameter conferenceId was null or undefined when calling deleteApplicationOfConference.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(application);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete Conference with Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param conferenceId ID of the Conference
     */
    public deleteConferenceById (token: number, conferenceId: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/conferences/{conference_id}'
            .replace('{' + 'conference_id' + '}', String(conferenceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling deleteConferenceById.');
        }
        // verify required parameter 'conferenceId' is not null or undefined
        if (conferenceId === null || conferenceId === undefined) {
            throw new Error('Required parameter conferenceId was null or undefined when calling deleteConferenceById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * GET Applications of Conference with Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param conferenceId ID of the Conference
     */
    public getApplicationsByConference (token: number, conferenceId: number, extraHttpRequestParams?: any ) : Observable<Array<models.Application>> {
        const path = this.basePath + '/conferences/{conference_id}/applications'
            .replace('{' + 'conference_id' + '}', String(conferenceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getApplicationsByConference.');
        }
        // verify required parameter 'conferenceId' is not null or undefined
        if (conferenceId === null || conferenceId === undefined) {
            throw new Error('Required parameter conferenceId was null or undefined when calling getApplicationsByConference.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * GET one Conference by Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param conferenceId ID of the Conference
     */
    public getConferenceById (token: number, conferenceId: number, extraHttpRequestParams?: any ) : Observable<models.Conference> {
        const path = this.basePath + '/conferences/{conference_id}'
            .replace('{' + 'conference_id' + '}', String(conferenceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getConferenceById.');
        }
        // verify required parameter 'conferenceId' is not null or undefined
        if (conferenceId === null || conferenceId === undefined) {
            throw new Error('Required parameter conferenceId was null or undefined when calling getConferenceById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * GET all Conferences
     * The Conferences Endpoint returns all Conferences
     * @param token Accesstoken to authenticate with the API
     * @param filter Filter the Result
     * @param sort Sort the Result
     */
    public getConferences (token: number, filter?: string, sort?: string, extraHttpRequestParams?: any ) : Observable<Array<models.Conference>> {
        const path = this.basePath + '/conferences';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getConferences.');
        }
        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update Conference with Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param conferenceId ID of the Conference
     * @param conference Conference to Update
     */
    public updateConferenceById (token: number, conferenceId: number, conference: models.Conference, extraHttpRequestParams?: any ) : Observable<models.Conference> {
        const path = this.basePath + '/conferences/{conference_id}'
            .replace('{' + 'conference_id' + '}', String(conferenceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling updateConferenceById.');
        }
        // verify required parameter 'conferenceId' is not null or undefined
        if (conferenceId === null || conferenceId === undefined) {
            throw new Error('Required parameter conferenceId was null or undefined when calling updateConferenceById.');
        }
        // verify required parameter 'conference' is not null or undefined
        if (conference === null || conference === undefined) {
            throw new Error('Required parameter conference was null or undefined when calling updateConferenceById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(conference);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
