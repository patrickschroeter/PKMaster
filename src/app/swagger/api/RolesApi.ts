/**
 * PK API
 * Move your app forward with the PK API
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class RolesApi {
    protected basePath = 'https://localhost:8080/v0';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Add Permission to Role
     * 
     * @param token Accesstoken to authenticate with the API
     * @param roleId ID of Role
     * @param permissionId ID of Permission
     */
    public addPermissionToRole (token: number, roleId: number, permissionId: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/roles/{role_id}/permissions/{permission_id}'
            .replace('{' + 'role_id' + '}', String(roleId))
            .replace('{' + 'permission_id' + '}', String(permissionId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling addPermissionToRole.');
        }
        // verify required parameter 'roleId' is not null or undefined
        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling addPermissionToRole.');
        }
        // verify required parameter 'permissionId' is not null or undefined
        if (permissionId === null || permissionId === undefined) {
            throw new Error('Required parameter permissionId was null or undefined when calling addPermissionToRole.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create new Role
     * 
     * @param token Accesstoken to authenticate with the API
     * @param role The new Role Object
     */
    public addRole (token: number, role?: models.Role, extraHttpRequestParams?: any ) : Observable<models.Role> {
        const path = this.basePath + '/roles';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling addRole.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(role);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Remove Permission of Role
     * 
     * @param token Accesstoken to authenticate with the API
     * @param roleId ID of Role
     * @param permissionId ID of Permission
     */
    public deletePermissionOfRole (token: number, roleId: number, permissionId: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/roles/{role_id}/permissions/{permission_id}'
            .replace('{' + 'role_id' + '}', String(roleId))
            .replace('{' + 'permission_id' + '}', String(permissionId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling deletePermissionOfRole.');
        }
        // verify required parameter 'roleId' is not null or undefined
        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling deletePermissionOfRole.');
        }
        // verify required parameter 'permissionId' is not null or undefined
        if (permissionId === null || permissionId === undefined) {
            throw new Error('Required parameter permissionId was null or undefined when calling deletePermissionOfRole.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete Role with Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param roleId ID of Role
     */
    public deleteRoleById (token: number, roleId: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/roles/{role_id}'
            .replace('{' + 'role_id' + '}', String(roleId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling deleteRoleById.');
        }
        // verify required parameter 'roleId' is not null or undefined
        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling deleteRoleById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * GET one Role by Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param roleId ID of Role
     */
    public getRoleById (token: number, roleId: number, extraHttpRequestParams?: any ) : Observable<models.Role> {
        const path = this.basePath + '/roles/{role_id}'
            .replace('{' + 'role_id' + '}', String(roleId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getRoleById.');
        }
        // verify required parameter 'roleId' is not null or undefined
        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling getRoleById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * GET all Roles
     * The Roles Endpoint returns all Roles
     * @param token Accesstoken to authenticate with the API
     */
    public getRoles (token: number, extraHttpRequestParams?: any ) : Observable<Array<models.Role>> {
        const path = this.basePath + '/roles';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getRoles.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update Role with Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param roleId ID of Role
     * @param role Updated Role
     */
    public updateRoleById (token: number, roleId: number, role: models.Role, extraHttpRequestParams?: any ) : Observable<models.Role> {
        const path = this.basePath + '/roles/{role_id}'
            .replace('{' + 'role_id' + '}', String(roleId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling updateRoleById.');
        }
        // verify required parameter 'roleId' is not null or undefined
        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling updateRoleById.');
        }
        // verify required parameter 'role' is not null or undefined
        if (role === null || role === undefined) {
            throw new Error('Required parameter role was null or undefined when calling updateRoleById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(role);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
