/**
 * PK API
 * Move your app forward with the PK API
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class UsersApi {
    protected basePath = 'https://localhost:8080/v0';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Create new User from LDAP
     * 
     * @param token Accesstoken to authenticate with the API
     * @param user The User credentials
     */
    public addUser (token: number, user?: models.User, extraHttpRequestParams?: any ) : Observable<models.User> {
        const path = this.basePath + '/users';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling addUser.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(user);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * GET one User by Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param userId ID of User
     */
    public getUserById (token: number, userId: number, extraHttpRequestParams?: any ) : Observable<models.User> {
        const path = this.basePath + '/users/{user_id}'
            .replace('{' + 'user_id' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getUserById.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * GET all User
     * The Users Endpoint returns all Users
     * @param token Accesstoken to authenticate with the API
     */
    public getUsers (token: number, extraHttpRequestParams?: any ) : Observable<Array<models.User>> {
        const path = this.basePath + '/users';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getUsers.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Reset the User&#39;s Password
     * 
     * @param token Accesstoken to authenticate with the API
     * @param userId ID of User
     * @param email The User&#39;s E-Mail address
     */
    public resetUserPassword (token: number, userId: number, email: models.Email, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/users/{user_id}/reset'
            .replace('{' + 'user_id' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling resetUserPassword.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling resetUserPassword.');
        }
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling resetUserPassword.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(email);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update User with Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param userId ID of User
     * @param user Updated User
     */
    public updateUserById (token: number, userId: number, user: models.User, extraHttpRequestParams?: any ) : Observable<models.User> {
        const path = this.basePath + '/users/{user_id}'
            .replace('{' + 'user_id' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling updateUserById.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateUserById.');
        }
        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling updateUserById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(user);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update the User&#39;s Role
     * 
     * @param token Accesstoken to authenticate with the API
     * @param userId ID of User
     * @param role The User&#39;s new Role
     */
    public updateUserRole (token: number, userId: number, role: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/users/{user_id}/role'
            .replace('{' + 'user_id' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling updateUserRole.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateUserRole.');
        }
        // verify required parameter 'role' is not null or undefined
        if (role === null || role === undefined) {
            throw new Error('Required parameter role was null or undefined when calling updateUserRole.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(role);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update the User&#39;s Password
     * 
     * @param token Accesstoken to authenticate with the API
     * @param userId ID of User
     * @param setPasswordCredentials The User&#39;s new credentials
     */
    public updatetUserPassword (token: number, userId: number, setPasswordCredentials: models.SetPasswordCredentials, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/users/{user_id}/password'
            .replace('{' + 'user_id' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling updatetUserPassword.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updatetUserPassword.');
        }
        // verify required parameter 'setPasswordCredentials' is not null or undefined
        if (setPasswordCredentials === null || setPasswordCredentials === undefined) {
            throw new Error('Required parameter setPasswordCredentials was null or undefined when calling updatetUserPassword.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(setPasswordCredentials);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
