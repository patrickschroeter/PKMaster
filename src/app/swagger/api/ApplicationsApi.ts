/**
 * PK API
 * Move your app forward with the PK API
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class ApplicationsApi {
    protected basePath = 'https://localhost:8080/v0';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Create new Application
     * 
     * @param token Accesstoken to authenticate with the API
     * @param application The new Application Object
     */
    public addApplication (token: number, application?: models.Application, extraHttpRequestParams?: any ) : Observable<models.Application> {
        const path = this.basePath + '/applications';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling addApplication.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(application);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Add comment to Application
     * 
     * @param token Accesstoken to authenticate with the API
     * @param applicationId ID of the Application
     * @param comment New Comment
     */
    public addCommentToApplication (token: number, applicationId: number, comment: models.Comment, extraHttpRequestParams?: any ) : Observable<models.Comment> {
        const path = this.basePath + '/applications/{application_id}/comments'
            .replace('{' + 'application_id' + '}', String(applicationId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling addCommentToApplication.');
        }
        // verify required parameter 'applicationId' is not null or undefined
        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling addCommentToApplication.');
        }
        // verify required parameter 'comment' is not null or undefined
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling addCommentToApplication.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(comment);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete Application with Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param applicationId ID of the Application
     */
    public deleteApplicationById (token: number, applicationId: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/applications/{application_id}'
            .replace('{' + 'application_id' + '}', String(applicationId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling deleteApplicationById.');
        }
        // verify required parameter 'applicationId' is not null or undefined
        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling deleteApplicationById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * GET one Application by Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param applicationId ID of the Application
     */
    public getApplicationById (token: number, applicationId: number, extraHttpRequestParams?: any ) : Observable<models.Application> {
        const path = this.basePath + '/applications/{application_id}'
            .replace('{' + 'application_id' + '}', String(applicationId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getApplicationById.');
        }
        // verify required parameter 'applicationId' is not null or undefined
        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling getApplicationById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * GET all Applications
     * The Applications Endpoint returns all Applications
     * @param token Accesstoken to authenticate with the API
     * @param filter Filter the Result
     * @param sort Sort the Result
     */
    public getApplications (token: number, filter?: string, sort?: string, extraHttpRequestParams?: any ) : Observable<Array<models.Application>> {
        const path = this.basePath + '/applications';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getApplications.');
        }
        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update Application with Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param applicationId ID of the Application
     * @param application Application to Update
     */
    public updateApplicationById (token: number, applicationId: number, application: models.Application, extraHttpRequestParams?: any ) : Observable<models.Application> {
        const path = this.basePath + '/applications/{application_id}'
            .replace('{' + 'application_id' + '}', String(applicationId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling updateApplicationById.');
        }
        // verify required parameter 'applicationId' is not null or undefined
        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling updateApplicationById.');
        }
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling updateApplicationById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(application);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update a comment with Id
     * 
     * @param token Accesstoken to authenticate with the API
     * @param applicationId ID of the Application
     * @param commentId ID of the Comment
     * @param comment Updated Comment
     */
    public updateApplicationCommentById (token: number, applicationId: number, commentId: number, comment: models.Comment, extraHttpRequestParams?: any ) : Observable<models.Comment> {
        const path = this.basePath + '/applications/{application_id}/comments/{comment_id}'
            .replace('{' + 'application_id' + '}', String(applicationId))
            .replace('{' + 'comment_id' + '}', String(commentId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling updateApplicationCommentById.');
        }
        // verify required parameter 'applicationId' is not null or undefined
        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling updateApplicationCommentById.');
        }
        // verify required parameter 'commentId' is not null or undefined
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling updateApplicationCommentById.');
        }
        // verify required parameter 'comment' is not null or undefined
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling updateApplicationCommentById.');
        }
            headerParams.set('token', String(token));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(comment);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
