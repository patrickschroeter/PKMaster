/**
 * API Schnittstelle für die Prüfungskommision der Hochschule Augsburg
 * Hier sind alle Routen aufgelistet die zur verfügung stehen. Zuvor muss jedoch ein JWT Token überden Authorize Button hinzugefügt werden
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';
import * as models from './models';
import { Selectable } from './../../models';

export class FieldCreateDto {


    name: string;

    fieldType: string;

    label?: string;

    required?: boolean;

    multipleSelect?: boolean;

    contentType?: string;

    placeholder?: string;

    optionsJson?: string;

    enumOptionsTableId?: string;

    styleIds?: Array<string>;

    validationIds?: Array<string>;

    // Custom

    value?: string | string[];

    options?: Array<Selectable>;

    // optionTable?: string; -> enumOptionsTableId

    constructor(obj?: models.FieldDto) {
        obj = obj || {};
        this.name = obj.name;
        this.fieldType = obj.fieldType;
        this.label = obj.label;
        this.required = obj.required;
        this.multipleSelect = obj.multipleSelect;
        this.contentType = obj.contentType;
        this.placeholder = obj.placeholder;
        this.optionsJson = obj.optionsJson;
        this.enumOptionsTableId = obj.enumOptionsTableId;
        this.styleIds = [];
        this.validationIds = [];
        // this.styleIds = obj.styles ? obj.styles.map(obj => obj.id): [];
        // this.validationIds = obj.validations ? obj.validations.map(obj => obj.id) : [];
        this.value = obj.value;
        if (obj.optionsJson && typeof obj.optionsJson === 'string') {
            this.options = JSON.parse(obj.optionsJson);
        }
    }
}
